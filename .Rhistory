p3 <- ggplot(data = df, aes(x = date)) +
geom_line(aes(y = edge_d), color = "orange", size = 1.5) +
geom_line(aes(y = edge_d, text = paste("Date:", format(date, "%b %d"),
"<br>D Return Rate: ", scales::percent(returned_d, accuracy = 0.1),
"<br>R Return Rate: ", scales::percent(returned_r, accuracy = 0.1),
"<br>D Return Rate Edge: ", scales::percent(edge_d, accuracy = 0.1))),
color = "orange", size = 1.5) +
scale_y_continuous(limits = c(0, 0.2), breaks = seq(0, 0.2, 0.05), labels = scales::percent) +
labs(x = "Date", y = "D Return Rate Edge") +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p3, tooltip = c("text"))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(plotly)
options(scipen=999)
df <- read_csv("https://raw.githubusercontent.com/jwestreich/pa_early_vote/refs/heads/main/data.csv") %>%
mutate(date = mdy(date)) %>%
mutate(votes_total = votes_d + votes_r + votes_i) %>%
mutate(split_d = votes_d / votes_total,
split_r = votes_r / votes_total,
split_i = votes_i / votes_total) %>%
mutate(edge_d = returned_d - returned_r) %>%
mutate(firewall = votes_d - votes_r) %>%
mutate(firewall = ifelse(is.na(firewall),.000000000001,firewall))%>%
mutate(firewall_label = format(firewall, big.mark = ","),
edge_d_label = paste0(edge_d * 100, "%"))
df_long <- df %>%
select(date, votes_d, votes_r, votes_i, split_d, split_r, split_i)%>%
pivot_longer(cols = c(votes_d, votes_r, votes_i, split_d, split_r, split_i),
names_to = c(".value", "party"),
names_pattern = "(votes|split)_(d|r|i)")%>%
mutate(party=ifelse(party=="d", "Democrat", party),
party=ifelse(party=="r", "Republican", party),
party=ifelse(party=="i", "Independent", party),
)%>%
select(date, party, split, votes)%>%
mutate(split=ifelse(is.na(split),.00000000000000001,split))
ui <- fluidPage(
titlePanel("Pennsylvania Early Vote Tracker"),
mainPanel(
tags$h3("Democrat Advantage Tracker"),
tags$h4("How many more votes have been returned from Democrats than Republicans"),
plotlyOutput("firewallPlot", height = "600px"),
tags$h3("Create your own Democrat early vote firewall"),
tags$h4(HTML("What advantage would Democrats need fromearly votes to secure a win on Election Day?")),
sliderInput("total_turnout", "What do you think the total turnout will be?", min = 5000000, max = 10000000, value = 6700000),
sliderInput("early_voters_pct", "What percent of total turnout do you think will be from early votes?", min = 0, max = 100, value = 25, post = "%"),
sliderInput("dem_election_day_pct", "What percent of in-person votes do you think will be won by Democrats?", min = 0, max = 100, value = 40, post = "%"),
# tags$h3(HTML("In those conditions, Democrats will need this much of an<br>advantage from early votes to secure a win on Election Day")),
# tags$h3(textOutput("firewall_needed"), style = "font-size: 24px;"),
tags$h3(HTML(paste0("In those conditions, Democrats will need an advantage of", textOutput("firewall_needed"), " early votes to secure a win on Election Day")), style = "font-size: 24px;"),
tags$h3("Early Vote Party Split Tracker"),
selectInput("toggleView", "Select View", choices = c("100% stack" = "stack", "Raw vote count" = "raw")),
conditionalPanel(
condition = "input.toggleView == 'stack'",
plotlyOutput("vbmSplitStackPlot", height = "600px")
),
conditionalPanel(
condition = "input.toggleView == 'raw'",
plotlyOutput("vbmSplitBarPlot", height = "600px")
),
tags$h3("Dem Return Rate Edge Tracker"),
tags$h4("Percentage point difference between Democrat ballot return rate and Republican ballot return rate"),
tags$h5("Ballot return rate = number of ballots sent in divided by number of ballots requested"),
plotlyOutput("edgedPlot", height = "600px"),
tags$div(
style = "text-align: left; margin-top: 20px;",
"Thank you to ",
tags$a(href = "https://twitter.com/blockedfreq", "Joshua Smithley", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Data available at ",
tags$a(href = "https://www.pa.gov/en/agencies/vote/elections/elections-data.html", "Pennsylvania Agency of Voting & Elections", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Website created by ",
tags$a(href = "https://jwestreich.github.io/Jays-Portfolio/", "Jay Westreich", target = "_blank")
)
)
)
server <- function(input, output) {
output$firewallPlot <- renderPlotly({
p1 <- ggplot(data = df, aes(x = date)) +
geom_bar(aes(y = firewall), stat = "identity", fill = "blue", width = .9) +
geom_bar(aes(y = firewall, text = paste("Date:", format(date, "%b %d"),
"<br>Dem Votes: ", scales::comma(votes_d),
"<br>Rep Votes: ", scales::comma(votes_r),
"<br>D Advantage:", scales::comma(firewall, accuracy = 1))),
stat = "identity", fill = "blue", width = .9) +
# geom_line(aes(y = firewall_target), color = "black", linetype = "dashed", size = 1.5) +
scale_y_continuous(limits = c(0, 500000), breaks = seq(0, 500000, 100000), labels = scales::comma) +
labs(x = "Date", y = "Democrat Advantage") +
# annotate("text", x = min(df$date)+10, y = 420000, label = "Firewall Needed to Feel\nDecent on ED: 390,000", hjust = 0, size = 5) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p1, tooltip = c("text"))
})
output$firewall_needed <- renderText({
total_turnout <- input$total_turnout
early_voters_pct <- input$early_voters_pct / 100
dem_election_day_pct <- input$dem_election_day_pct / 100
firewall_needed <- total_turnout * (1 - early_voters_pct) * (1 - 2 * dem_election_day_pct)
paste(scales::comma(firewall_needed))
})
textOutput("firewall_needed")
output$vbmSplitStackPlot <- renderPlotly({
p2.1 <- ggplot(df_long, aes(x = date, y = split, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1), "<br>",
"Number of Votes : ", scales::comma(votes)))) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Percent of Vote", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplotly(p2.1, tooltip = "text")
})
output$vbmSplitBarPlot <- renderPlotly({
p2.2 <- ggplot(df_long, aes(x = date, y = votes, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Number of Votes : ", scales::comma(votes), "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::comma) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Number of Votes", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12))
ggplotly(p2.2, tooltip = "text")
})
output$edgedPlot <- renderPlotly({
p3 <- ggplot(data = df, aes(x = date)) +
geom_line(aes(y = edge_d), color = "orange", size = 1.5) +
geom_line(aes(y = edge_d, text = paste("Date:", format(date, "%b %d"),
"<br>D Return Rate: ", scales::percent(returned_d, accuracy = 0.1),
"<br>R Return Rate: ", scales::percent(returned_r, accuracy = 0.1),
"<br>D Return Rate Edge: ", scales::percent(edge_d, accuracy = 0.1))),
color = "orange", size = 1.5) +
scale_y_continuous(limits = c(0, 0.2), breaks = seq(0, 0.2, 0.05), labels = scales::percent) +
labs(x = "Date", y = "D Return Rate Edge") +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p3, tooltip = c("text"))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(plotly)
options(scipen=999)
df <- read_csv("https://raw.githubusercontent.com/jwestreich/pa_early_vote/refs/heads/main/data.csv") %>%
mutate(date = mdy(date)) %>%
mutate(votes_total = votes_d + votes_r + votes_i) %>%
mutate(split_d = votes_d / votes_total,
split_r = votes_r / votes_total,
split_i = votes_i / votes_total) %>%
mutate(edge_d = returned_d - returned_r) %>%
mutate(firewall = votes_d - votes_r) %>%
mutate(firewall = ifelse(is.na(firewall),.000000000001,firewall))%>%
mutate(firewall_label = format(firewall, big.mark = ","),
edge_d_label = paste0(edge_d * 100, "%"))
df_long <- df %>%
select(date, votes_d, votes_r, votes_i, split_d, split_r, split_i)%>%
pivot_longer(cols = c(votes_d, votes_r, votes_i, split_d, split_r, split_i),
names_to = c(".value", "party"),
names_pattern = "(votes|split)_(d|r|i)")%>%
mutate(party=ifelse(party=="d", "Democrat", party),
party=ifelse(party=="r", "Republican", party),
party=ifelse(party=="i", "Independent", party),
)%>%
select(date, party, split, votes)%>%
mutate(split=ifelse(is.na(split),.00000000000000001,split))
ui <- fluidPage(
titlePanel("Pennsylvania Early Vote Tracker"),
mainPanel(
tags$h3("Democrat Advantage Tracker"),
tags$h4("How many more votes have been returned from Democrats than Republicans"),
plotlyOutput("firewallPlot", height = "600px"),
tags$h3("Create your own Democrat early vote firewall"),
tags$h4(HTML("What advantage would Democrats need from early votes to secure a win on Election Day?")),
sliderInput("total_turnout", "What do you think the total turnout will be?", min = 5000000, max = 10000000, value = 6700000),
sliderInput("early_voters_pct", "What percent of total turnout do you think will be from early votes?", min = 0, max = 100, value = 25, post = "%"),
sliderInput("dem_election_day_pct", "What percent of in-person votes do you think will be won by Democrats?", min = 0, max = 100, value = 40, post = "%"),
tags$h3(HTML(paste0("In those conditions, Democrats will need an advantage of", textOutput("firewall_needed"), " early votes to secure a win on Election Day")), style = "font-size: 24px;"),
tags$h3("Early Vote Party Split Tracker"),
selectInput("toggleView", "Select View", choices = c("100% stack" = "stack", "Raw vote count" = "raw")),
conditionalPanel(
condition = "input.toggleView == 'stack'",
plotlyOutput("vbmSplitStackPlot", height = "600px")
),
conditionalPanel(
condition = "input.toggleView == 'raw'",
plotlyOutput("vbmSplitBarPlot", height = "600px")
),
tags$h3("Dem Return Rate Edge Tracker"),
tags$h4("Percentage point difference between Democrat ballot return rate and Republican ballot return rate"),
tags$h5("Ballot return rate = number of ballots sent in divided by number of ballots requested"),
plotlyOutput("edgedPlot", height = "600px"),
tags$div(
style = "text-align: left; margin-top: 20px;",
"Thank you to ",
tags$a(href = "https://twitter.com/blockedfreq", "Joshua Smithley", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Data available at ",
tags$a(href = "https://www.pa.gov/en/agencies/vote/elections/elections-data.html", "Pennsylvania Agency of Voting & Elections", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Website created by ",
tags$a(href = "https://jwestreich.github.io/Jays-Portfolio/", "Jay Westreich", target = "_blank")
)
)
)
server <- function(input, output) {
output$firewallPlot <- renderPlotly({
p1 <- ggplot(data = df, aes(x = date)) +
geom_bar(aes(y = firewall), stat = "identity", fill = "blue", width = .9) +
geom_bar(aes(y = firewall, text = paste("Date:", format(date, "%b %d"),
"<br>Dem Votes: ", scales::comma(votes_d),
"<br>Rep Votes: ", scales::comma(votes_r),
"<br>D Advantage:", scales::comma(firewall, accuracy = 1))),
stat = "identity", fill = "blue", width = .9) +
# geom_line(aes(y = firewall_target), color = "black", linetype = "dashed", size = 1.5) +
scale_y_continuous(limits = c(0, 500000), breaks = seq(0, 500000, 100000), labels = scales::comma) +
labs(x = "Date", y = "Democrat Advantage") +
# annotate("text", x = min(df$date)+10, y = 420000, label = "Firewall Needed to Feel\nDecent on ED: 390,000", hjust = 0, size = 5) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p1, tooltip = c("text"))
})
output$firewall_needed <- renderText({
total_turnout <- input$total_turnout
early_voters_pct <- input$early_voters_pct / 100
dem_election_day_pct <- input$dem_election_day_pct / 100
firewall_needed <- total_turnout * (1 - early_voters_pct) * (1 - 2 * dem_election_day_pct)
paste(scales::comma(firewall_needed))
})
textOutput("firewall_needed")
output$vbmSplitStackPlot <- renderPlotly({
p2.1 <- ggplot(df_long, aes(x = date, y = split, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1), "<br>",
"Number of Votes : ", scales::comma(votes)))) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Percent of Vote", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplotly(p2.1, tooltip = "text")
})
output$vbmSplitBarPlot <- renderPlotly({
p2.2 <- ggplot(df_long, aes(x = date, y = votes, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Number of Votes : ", scales::comma(votes), "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::comma) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Number of Votes", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12))
ggplotly(p2.2, tooltip = "text")
})
output$edgedPlot <- renderPlotly({
p3 <- ggplot(data = df, aes(x = date)) +
geom_line(aes(y = edge_d), color = "orange", size = 1.5) +
geom_line(aes(y = edge_d, text = paste("Date:", format(date, "%b %d"),
"<br>D Return Rate: ", scales::percent(returned_d, accuracy = 0.1),
"<br>R Return Rate: ", scales::percent(returned_r, accuracy = 0.1),
"<br>D Return Rate Edge: ", scales::percent(edge_d, accuracy = 0.1))),
color = "orange", size = 1.5) +
scale_y_continuous(limits = c(0, 0.2), breaks = seq(0, 0.2, 0.05), labels = scales::percent) +
labs(x = "Date", y = "D Return Rate Edge") +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p3, tooltip = c("text"))
})
}
shinyApp(ui = ui, server = server)
df <- read_csv("https://raw.githubusercontent.com/jwestreich/pa_early_vote/refs/heads/main/data.csv")
View(df)
library(shiny)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(plotly)
options(scipen=999)
df <- read_csv("https://raw.githubusercontent.com/jwestreich/pa_early_vote/refs/heads/main/data.csv") %>%
mutate(date = mdy(date)) %>%
mutate(votes_total = votes_d + votes_r + votes_i) %>%
mutate(split_d = votes_d / votes_total,
split_r = votes_r / votes_total,
split_i = votes_i / votes_total) %>%
mutate(edge_d = returned_d - returned_r) %>%
mutate(firewall = votes_d - votes_r) %>%
mutate(firewall = ifelse(is.na(firewall),.000000000001,firewall))%>%
mutate(firewall_label = format(firewall, big.mark = ","),
edge_d_label = paste0(edge_d * 100, "%"))
df_long <- df %>%
select(date, votes_d, votes_r, votes_i, split_d, split_r, split_i)%>%
pivot_longer(cols = c(votes_d, votes_r, votes_i, split_d, split_r, split_i),
names_to = c(".value", "party"),
names_pattern = "(votes|split)_(d|r|i)")%>%
mutate(party=ifelse(party=="d", "Democrat", party),
party=ifelse(party=="r", "Republican", party),
party=ifelse(party=="i", "Independent", party),
)%>%
select(date, party, split, votes)%>%
mutate(split=ifelse(is.na(split),.00000000000000001,split))
ui <- fluidPage(
titlePanel("Pennsylvania Early Vote Tracker"),
mainPanel(
tags$h3("Democrat Advantage Tracker"),
tags$h4("How many more votes have been cast from Democrats than Republicans"),
plotlyOutput("firewallPlot", height = "600px"),
tags$h3("Create your own Democrat early vote firewall"),
tags$h4(HTML("What advantage would Democrats need from early votes to secure a win on Election Day?")),
sliderInput("total_turnout", "What do you think the total turnout will be?", min = 5000000, max = 10000000, value = 6700000),
sliderInput("early_voters_pct", "What percent of total turnout do you think will be from early votes?", min = 0, max = 100, value = 25, post = "%"),
sliderInput("dem_election_day_pct", "What percent of in-person votes do you think will be won by Democrats?", min = 0, max = 100, value = 40, post = "%"),
tags$h3(HTML(paste0("In those conditions, Democrats will need an advantage of", textOutput("firewall_needed"), " early votes to secure a win on Election Day")), style = "font-size: 24px;"),
tags$h3("Early Vote Party Split Tracker"),
selectInput("toggleView", "Select View", choices = c("100% stack" = "stack", "Raw vote count" = "raw")),
conditionalPanel(
condition = "input.toggleView == 'stack'",
plotlyOutput("vbmSplitStackPlot", height = "600px")
),
conditionalPanel(
condition = "input.toggleView == 'raw'",
plotlyOutput("vbmSplitBarPlot", height = "600px")
),
tags$h3("Dem Return Rate Edge Tracker"),
tags$h4("Percentage point difference between Democrat ballot return rate and Republican ballot return rate"),
tags$h5("Ballot return rate = number of ballots sent in divided by number of ballots requested"),
plotlyOutput("edgedPlot", height = "600px"),
tags$div(
style = "text-align: left; margin-top: 20px;",
"Thank you to ",
tags$a(href = "https://twitter.com/blockedfreq", "Joshua Smithley", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Data available at ",
tags$a(href = "https://www.pa.gov/en/agencies/vote/elections/elections-data.html", "Pennsylvania Agency of Voting & Elections", target = "_blank")
),
tags$div(
style = "text-align: left; margin-top: 10px;",
"Website created by ",
tags$a(href = "https://jwestreich.github.io/Jays-Portfolio/", "Jay Westreich", target = "_blank")
)
)
)
server <- function(input, output) {
output$firewallPlot <- renderPlotly({
p1 <- ggplot(data = df, aes(x = date)) +
geom_bar(aes(y = firewall), stat = "identity", fill = "blue", width = .9) +
geom_bar(aes(y = firewall, text = paste("Date:", format(date, "%b %d"),
"<br>Dem Votes: ", scales::comma(votes_d),
"<br>Rep Votes: ", scales::comma(votes_r),
"<br>D Advantage:", scales::comma(firewall, accuracy = 1))),
stat = "identity", fill = "blue", width = .9) +
# geom_line(aes(y = firewall_target), color = "black", linetype = "dashed", size = 1.5) +
scale_y_continuous(limits = c(0, 500000), breaks = seq(0, 500000, 100000), labels = scales::comma) +
labs(x = "Date", y = "Democrat Advantage") +
# annotate("text", x = min(df$date)+10, y = 420000, label = "Firewall Needed to Feel\nDecent on ED: 390,000", hjust = 0, size = 5) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p1, tooltip = c("text"))
})
output$firewall_needed <- renderText({
total_turnout <- input$total_turnout
early_voters_pct <- input$early_voters_pct / 100
dem_election_day_pct <- input$dem_election_day_pct / 100
firewall_needed <- total_turnout * (1 - early_voters_pct) * (1 - 2 * dem_election_day_pct)
paste(scales::comma(firewall_needed))
})
textOutput("firewall_needed")
output$vbmSplitStackPlot <- renderPlotly({
p2.1 <- ggplot(df_long, aes(x = date, y = split, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1), "<br>",
"Number of Votes : ", scales::comma(votes)))) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Percent of Vote", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplotly(p2.1, tooltip = "text")
})
output$vbmSplitBarPlot <- renderPlotly({
p2.2 <- ggplot(df_long, aes(x = date, y = votes, fill = party,
text = paste0("Date: ", format(date, "%b %d"), "<br>",
"Party: ", party, "<br>",
"Number of Votes : ", scales::comma(votes), "<br>",
"Percent of Vote: ", scales::percent(split, accuracy = 0.1)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::comma) +
scale_fill_manual(values = c("Republican" = "lightcoral", "Independent" = "lightgray", "Democrat" = "lightblue")) +
scale_x_date(date_labels = "%b %d") +
labs(x = "Date", y = "Number of Votes", fill = "Party") +
theme_classic() +
theme(axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12))
ggplotly(p2.2, tooltip = "text")
})
output$edgedPlot <- renderPlotly({
p3 <- ggplot(data = df, aes(x = date)) +
geom_line(aes(y = edge_d), color = "orange", size = 1.5) +
geom_line(aes(y = edge_d, text = paste("Date:", format(date, "%b %d"),
"<br>D Return Rate: ", scales::percent(returned_d, accuracy = 0.1),
"<br>R Return Rate: ", scales::percent(returned_r, accuracy = 0.1),
"<br>D Return Rate Edge: ", scales::percent(edge_d, accuracy = 0.1))),
color = "orange", size = 1.5) +
scale_y_continuous(limits = c(0, 0.2), breaks = seq(0, 0.2, 0.05), labels = scales::percent) +
labs(x = "Date", y = "D Return Rate Edge") +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplotly(p3, tooltip = c("text"))
})
}
shinyApp(ui = ui, server = server)
